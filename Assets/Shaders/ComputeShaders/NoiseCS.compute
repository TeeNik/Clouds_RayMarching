#pragma kernel CSMain

#include "../Utils/Random.cginc"
#include "../Utils/Perlin3D.cginc"
#include "../Utils/WorleyNoise.cginc"
#include "../Utils/NoiseFunctions.cginc"
#include "../Utils/TileablePerlinWorleyNoise.cginc"

RWTexture3D<float4> Result;
uniform uint Resolution;
uniform float3 CellIndex;

uniform float Coverage;
uniform uint Octaves;
uniform float Frequency;
uniform float Lacunarity;
uniform float Amplitude;
uniform float Persistence;
uniform float3 Offset;

float GetNoise(float3 pos)
{
    //return worleyFbm(pos, Frequency) * .125;
    float pfbm = lerp(1., perlinfbm(pos, Frequency, Octaves), .5);
    return PerlinTilled(pos, Coverage, Octaves, Offset, Frequency, Amplitude, Lacunarity, Persistence);

    //return perlinfbm(pos, Frequency, Octaves);
    //return WorleyNormal(pos, Coverage, Octaves, Offset, Frequency, Amplitude, Lacunarity, Persistence);
    return PerlinNormal(pos, Coverage, Octaves, Offset, Frequency, Amplitude, Lacunarity, Persistence);
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 uv = id.xyz / (float)Resolution;
    float3 color = GetNoise(uv + CellIndex * Resolution);
    Result[id.xyz] = float4(color, 1.0);
}